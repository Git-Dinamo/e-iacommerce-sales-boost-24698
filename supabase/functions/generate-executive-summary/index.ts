import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { projectData } = await req.json();
    const LOVABLE_API_KEY = Deno.env.get("LOVABLE_API_KEY");
    
    if (!LOVABLE_API_KEY) {
      throw new Error("LOVABLE_API_KEY is not configured");
    }

    console.log("Generating executive summary for project:", projectData.projeto.nome);

    const systemPrompt = `Voc√™ √© um especialista em Business Intelligence e visualiza√ß√£o de dados financeiros.

Gere um DASHBOARD EXECUTIVO PROFISSIONAL em HTML completo usando Tailwind CSS via CDN.

‚ö†Ô∏è CR√çTICO - REGRAS OBRIGAT√ìRIAS:
1. NUNCA use template literals (\`\${variavel}\`) no HTML - sempre calcule ANTES e insira o VALOR FINAL
2. NUNCA deixe c√≥digo JavaScript vis√≠vel no HTML renderizado
3. Todos os c√°lculos devem ser feitos INLINE usando apenas os valores num√©ricos fornecidos
4. Use APENAS opera√ß√µes matem√°ticas diretas com os n√∫meros dos dados fornecidos

REQUISITOS DO HTML:
- Documento HTML completo e v√°lido (<!DOCTYPE html>, <html>, <head>, <body>)
- Tailwind CSS via CDN: https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css
- Design tipo BI/Dashboard com FOCO EM VISUALIZA√á√ÉO DE DADOS
- Cores HSL: roxo hsl(256, 70%, 66%), azul hsl(204, 70%, 53%), verde hsl(162, 73%, 46%)
- Responsivo e otimizado para impress√£o A4
- @media print para layout limpo

ESTRUTURA DO DASHBOARD (TIPO BI):

1. üéØ HEADER EXECUTIVO:
   - T√≠tulo "Dashboard Executivo Financeiro"
   - Nome do projeto + cliente
   - Data de gera√ß√£o
   - Badge com prazo do contrato (ex: "An√°lise 12 meses")

2. üìä PAINEL DE KPIs (Grid 2x2 ou 1x4):
   Cards grandes e visuais com:
   - üí∞ Receita Total do Projeto (valor + √≠cone) - Projetada para [simulacao.prazoContrato] meses
   - üí∏ Custo Total do Projeto (valor + √≠cone) - Projetado para [simulacao.prazoContrato] meses
   - üìà Margem L√≠quida % (com barra de progresso colorida)
   - üéØ Lucro L√≠quido do Projeto (destaque positivo/negativo) - Para [simulacao.prazoContrato] meses
   
   Cores semaf√≥ricas:
   - Verde: margem > 30%
   - Amarelo: margem 15-30%
   - Vermelho: margem < 15%

3. üíº BREAKDOWN IMPLANTA√á√ÉO:
   Se√ß√£o com 2 colunas:
   
   COLUNA 1 - Custos Fonte (Implanta√ß√£o):
   - Tabela estilizada listando cada custo
   - Colunas: Nome | Descri√ß√£o | Valor
   - Footer: TOTAL CUSTOS IMPLANTA√á√ÉO
   
   COLUNA 2 - Entreg√°veis Comerciais (Implanta√ß√£o):
   - Tabela listando cada entreg√°vel
   - Colunas: Nome | Qtd | Pre√ßo Unit. | Total
   - Footer: TOTAL RECEITA IMPLANTA√á√ÉO
   
   Card de Resumo Implanta√ß√£o:
   - Receita vs Custo (barras lado a lado)
   - Margem % em destaque

4. üîÑ BREAKDOWN RECORR√äNCIA MENSAL:
   Se√ß√£o com 2 colunas:
   
   COLUNA 1 - Custos Mensais Fixos:
   - Tabela estilizada
   - Colunas: Nome | Descri√ß√£o | Valor/m√™s
   - Footer: TOTAL CUSTOS MENSAIS
   
   COLUNA 2 - Entreg√°veis Mensais:
   - Tabela listando entreg√°veis recorrentes
   - Colunas: Nome | Qtd | Pre√ßo Unit. | Total/m√™s
   - Footer: TOTAL RECEITA MENSAL
   
   Card de Resumo Recorr√™ncia:
   - Receita vs Custo mensal (barras)
   - Margem % recorrente em destaque

5. üìà PROJE√á√ÉO DE FLUXO DE CAIXA:
   Tabela m√™s a m√™s (do m√™s 0 at√© o prazo do contrato informado em simulacao.prazoContrato):
   
   Colunas:
   | M√™s | Receita (R$) | Custo (R$) | Lucro Mensal (R$) | Lucro Acumulado (R$) |
   
   C√ÅLCULOS:
   - M√™s 0: Implanta√ß√£o (receita implanta√ß√£o - custo implanta√ß√£o)
   - M√™s 1 at√© simulacao.prazoContrato: Recorr√™ncia (receita mensal - custo mensal)
   - Lucro Acumulado: soma cumulativa
   
   ‚ö†Ô∏è IMPORTANTE: Calcule cada linha da tabela usando os valores num√©ricos fornecidos
   Exemplo: Se receitaMensal = 5000 e custoMensal = 2000, ent√£o lucroMensal = 3000
   
   Destacar:
   - M√™s do Breakeven (quando acumulado fica positivo)
   - Linha total ao final

6. üéØ INDICADORES CHAVE:
   Grid de mini-cards:
   - üèÅ Breakeven Point: "M√™s X" ou "N√£o atingido"
   - üíπ ROI Total: "X%" (calculado: lucro total / custo total * 100)
   - üìä Margem Implanta√ß√£o: "X%"
   - üîÑ Margem Recorr√™ncia: "X%"

FORMATA√á√ÉO VISUAL:
- Tabelas: bordas finas, linhas alternadas (bg-gray-50), headers coloridos
- Cards: shadow-lg, rounded-lg, padding generoso
- Gradientes em headers principais
- N√∫meros: font-bold, tamanho grande para KPIs
- Use emojis para √≠cones visuais
- Barras de progresso para margens
- Cores condicionais (verde/amarelo/vermelho) baseadas em performance

‚ö†Ô∏è FORMATA√á√ÉO DE VALORES MONET√ÅRIOS (CR√çTICO):
- TODOS os valores em reais devem seguir o padr√£o brasileiro: R$ 9.000,00
- Use ponto (.) como separador de milhares
- Use v√≠rgula (,) como separador decimal
- Sempre 2 casas decimais
- Exemplos: R$ 1.500,00 | R$ 12.800,00 | R$ 3.843,42 | R$ 8.956,58
- Nunca use formato americano (12800.00)

N√ÉO INCLUIR:
‚ùå An√°lise de viabilidade textual
‚ùå Recomenda√ß√µes estrat√©gicas
‚ùå Pontos fortes/fracos narrativos
‚ùå Conclus√µes escritas

FOCO: Dados puros, visualiza√ß√µes claras, m√©tricas objetivas - um verdadeiro dashboard BI.`;

    const userPrompt = `Gere o dashboard BI completo em HTML para os seguintes dados do projeto:

${JSON.stringify(projectData, null, 2)}

INSTRU√á√ïES FINAIS:
- Calcule TODOS os valores antes de inserir no HTML (nunca use template literals como \${variavel})
- Gere tabela de fluxo de caixa m√™s a m√™s com valores calculados
- Identifique o m√™s de breakeven (quando lucro acumulado fica positivo)
- Use cores semaf√≥ricas para margens (verde/amarelo/vermelho)
- Crie visualiza√ß√µes tipo dashboard/BI com foco em DADOS OBJETIVOS
- N√ÉO inclua an√°lises textuais, recomenda√ß√µes ou narrativas
- O HTML deve ser COMPLETO, V√ÅLIDO e pronto para renderiza√ß√£o direta
- ‚ö†Ô∏è CR√çTICO: TODOS os valores monet√°rios DEVEM usar formato brasileiro: R$ 9.000,00 (ponto para milhares, v√≠rgula para decimais)`;

    const response = await fetch("https://ai.gateway.lovable.dev/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${LOVABLE_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "google/gemini-2.5-flash",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      if (response.status === 429) {
        return new Response(
          JSON.stringify({ error: "Rate limit exceeded. Please try again later." }),
          { status: 429, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      if (response.status === 402) {
        return new Response(
          JSON.stringify({ error: "Payment required. Please add credits to your Lovable AI workspace." }),
          { status: 402, headers: { ...corsHeaders, "Content-Type": "application/json" } }
        );
      }
      const errorText = await response.text();
      console.error("AI gateway error:", response.status, errorText);
      throw new Error(`AI gateway error: ${response.status}`);
    }

    const data = await response.json();
    const htmlContent = data.choices[0].message.content;

    console.log("Executive summary generated successfully");

    return new Response(
      JSON.stringify({ html: htmlContent }),
      { 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );

  } catch (error) {
    console.error("Error in generate-executive-summary:", error);
    return new Response(
      JSON.stringify({ 
        error: error instanceof Error ? error.message : "Unknown error" 
      }),
      { 
        status: 500, 
        headers: { 
          ...corsHeaders, 
          "Content-Type": "application/json" 
        } 
      }
    );
  }
});
